// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: internal/proto/gamenode.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameNodeService_Register_FullMethodName            = "/gamenode.GameNodeService/Register"
	GameNodeService_Heartbeat_FullMethodName           = "/gamenode.GameNodeService/Heartbeat"
	GameNodeService_ExecutePipeline_FullMethodName     = "/gamenode.GameNodeService/ExecutePipeline"
	GameNodeService_GetPipelineStatus_FullMethodName   = "/gamenode.GameNodeService/GetPipelineStatus"
	GameNodeService_CancelPipeline_FullMethodName      = "/gamenode.GameNodeService/CancelPipeline"
	GameNodeService_StartContainer_FullMethodName      = "/gamenode.GameNodeService/StartContainer"
	GameNodeService_StopContainer_FullMethodName       = "/gamenode.GameNodeService/StopContainer"
	GameNodeService_RestartContainer_FullMethodName    = "/gamenode.GameNodeService/RestartContainer"
	GameNodeService_GetNodeMetrics_FullMethodName      = "/gamenode.GameNodeService/GetNodeMetrics"
	GameNodeService_StreamNodeLogs_FullMethodName      = "/gamenode.GameNodeService/StreamNodeLogs"
	GameNodeService_StreamContainerLogs_FullMethodName = "/gamenode.GameNodeService/StreamContainerLogs"
	GameNodeService_SubscribeEvents_FullMethodName     = "/gamenode.GameNodeService/SubscribeEvents"
)

// GameNodeServiceClient is the client API for GameNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GameNodeService 定义节点Agent的gRPC服务
type GameNodeServiceClient interface {
	// 节点注册与心跳
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Pipeline管理
	ExecutePipeline(ctx context.Context, in *ExecutePipelineRequest, opts ...grpc.CallOption) (*ExecutePipelineResponse, error)
	GetPipelineStatus(ctx context.Context, in *PipelineStatusRequest, opts ...grpc.CallOption) (*PipelineStatusResponse, error)
	CancelPipeline(ctx context.Context, in *PipelineCancelRequest, opts ...grpc.CallOption) (*PipelineCancelResponse, error)
	// 容器管理
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error)
	StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error)
	RestartContainer(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*RestartContainerResponse, error)
	// 状态监控
	GetNodeMetrics(ctx context.Context, in *NodeMetricsRequest, opts ...grpc.CallOption) (*NodeMetricsResponse, error)
	StreamNodeLogs(ctx context.Context, in *NodeLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	StreamContainerLogs(ctx context.Context, in *ContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	// 事件流
	SubscribeEvents(ctx context.Context, in *EventSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
}

type gameNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameNodeServiceClient(cc grpc.ClientConnInterface) GameNodeServiceClient {
	return &gameNodeServiceClient{cc}
}

func (c *gameNodeServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, GameNodeService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, GameNodeService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeServiceClient) ExecutePipeline(ctx context.Context, in *ExecutePipelineRequest, opts ...grpc.CallOption) (*ExecutePipelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutePipelineResponse)
	err := c.cc.Invoke(ctx, GameNodeService_ExecutePipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeServiceClient) GetPipelineStatus(ctx context.Context, in *PipelineStatusRequest, opts ...grpc.CallOption) (*PipelineStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PipelineStatusResponse)
	err := c.cc.Invoke(ctx, GameNodeService_GetPipelineStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeServiceClient) CancelPipeline(ctx context.Context, in *PipelineCancelRequest, opts ...grpc.CallOption) (*PipelineCancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PipelineCancelResponse)
	err := c.cc.Invoke(ctx, GameNodeService_CancelPipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeServiceClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartContainerResponse)
	err := c.cc.Invoke(ctx, GameNodeService_StartContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeServiceClient) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopContainerResponse)
	err := c.cc.Invoke(ctx, GameNodeService_StopContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeServiceClient) RestartContainer(ctx context.Context, in *RestartContainerRequest, opts ...grpc.CallOption) (*RestartContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartContainerResponse)
	err := c.cc.Invoke(ctx, GameNodeService_RestartContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeServiceClient) GetNodeMetrics(ctx context.Context, in *NodeMetricsRequest, opts ...grpc.CallOption) (*NodeMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeMetricsResponse)
	err := c.cc.Invoke(ctx, GameNodeService_GetNodeMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeServiceClient) StreamNodeLogs(ctx context.Context, in *NodeLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameNodeService_ServiceDesc.Streams[0], GameNodeService_StreamNodeLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeLogsRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameNodeService_StreamNodeLogsClient = grpc.ServerStreamingClient[LogEntry]

func (c *gameNodeServiceClient) StreamContainerLogs(ctx context.Context, in *ContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameNodeService_ServiceDesc.Streams[1], GameNodeService_StreamContainerLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ContainerLogsRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameNodeService_StreamContainerLogsClient = grpc.ServerStreamingClient[LogEntry]

func (c *gameNodeServiceClient) SubscribeEvents(ctx context.Context, in *EventSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameNodeService_ServiceDesc.Streams[2], GameNodeService_SubscribeEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventSubscriptionRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameNodeService_SubscribeEventsClient = grpc.ServerStreamingClient[Event]

// GameNodeServiceServer is the server API for GameNodeService service.
// All implementations must embed UnimplementedGameNodeServiceServer
// for forward compatibility.
//
// GameNodeService 定义节点Agent的gRPC服务
type GameNodeServiceServer interface {
	// 节点注册与心跳
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Pipeline管理
	ExecutePipeline(context.Context, *ExecutePipelineRequest) (*ExecutePipelineResponse, error)
	GetPipelineStatus(context.Context, *PipelineStatusRequest) (*PipelineStatusResponse, error)
	CancelPipeline(context.Context, *PipelineCancelRequest) (*PipelineCancelResponse, error)
	// 容器管理
	StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
	RestartContainer(context.Context, *RestartContainerRequest) (*RestartContainerResponse, error)
	// 状态监控
	GetNodeMetrics(context.Context, *NodeMetricsRequest) (*NodeMetricsResponse, error)
	StreamNodeLogs(*NodeLogsRequest, grpc.ServerStreamingServer[LogEntry]) error
	StreamContainerLogs(*ContainerLogsRequest, grpc.ServerStreamingServer[LogEntry]) error
	// 事件流
	SubscribeEvents(*EventSubscriptionRequest, grpc.ServerStreamingServer[Event]) error
	mustEmbedUnimplementedGameNodeServiceServer()
}

// UnimplementedGameNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameNodeServiceServer struct{}

func (UnimplementedGameNodeServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGameNodeServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedGameNodeServiceServer) ExecutePipeline(context.Context, *ExecutePipelineRequest) (*ExecutePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePipeline not implemented")
}
func (UnimplementedGameNodeServiceServer) GetPipelineStatus(context.Context, *PipelineStatusRequest) (*PipelineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineStatus not implemented")
}
func (UnimplementedGameNodeServiceServer) CancelPipeline(context.Context, *PipelineCancelRequest) (*PipelineCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPipeline not implemented")
}
func (UnimplementedGameNodeServiceServer) StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (UnimplementedGameNodeServiceServer) StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedGameNodeServiceServer) RestartContainer(context.Context, *RestartContainerRequest) (*RestartContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartContainer not implemented")
}
func (UnimplementedGameNodeServiceServer) GetNodeMetrics(context.Context, *NodeMetricsRequest) (*NodeMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMetrics not implemented")
}
func (UnimplementedGameNodeServiceServer) StreamNodeLogs(*NodeLogsRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method StreamNodeLogs not implemented")
}
func (UnimplementedGameNodeServiceServer) StreamContainerLogs(*ContainerLogsRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method StreamContainerLogs not implemented")
}
func (UnimplementedGameNodeServiceServer) SubscribeEvents(*EventSubscriptionRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvents not implemented")
}
func (UnimplementedGameNodeServiceServer) mustEmbedUnimplementedGameNodeServiceServer() {}
func (UnimplementedGameNodeServiceServer) testEmbeddedByValue()                         {}

// UnsafeGameNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameNodeServiceServer will
// result in compilation errors.
type UnsafeGameNodeServiceServer interface {
	mustEmbedUnimplementedGameNodeServiceServer()
}

func RegisterGameNodeServiceServer(s grpc.ServiceRegistrar, srv GameNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameNodeService_ServiceDesc, srv)
}

func _GameNodeService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeService_ExecutePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeServiceServer).ExecutePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeService_ExecutePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeServiceServer).ExecutePipeline(ctx, req.(*ExecutePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeService_GetPipelineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeServiceServer).GetPipelineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeService_GetPipelineStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeServiceServer).GetPipelineStatus(ctx, req.(*PipelineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeService_CancelPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeServiceServer).CancelPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeService_CancelPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeServiceServer).CancelPipeline(ctx, req.(*PipelineCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeService_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeServiceServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeService_StartContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeServiceServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeService_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeServiceServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeService_StopContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeServiceServer).StopContainer(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeService_RestartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeServiceServer).RestartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeService_RestartContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeServiceServer).RestartContainer(ctx, req.(*RestartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeService_GetNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeServiceServer).GetNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeService_GetNodeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeServiceServer).GetNodeMetrics(ctx, req.(*NodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeService_StreamNodeLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameNodeServiceServer).StreamNodeLogs(m, &grpc.GenericServerStream[NodeLogsRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameNodeService_StreamNodeLogsServer = grpc.ServerStreamingServer[LogEntry]

func _GameNodeService_StreamContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContainerLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameNodeServiceServer).StreamContainerLogs(m, &grpc.GenericServerStream[ContainerLogsRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameNodeService_StreamContainerLogsServer = grpc.ServerStreamingServer[LogEntry]

func _GameNodeService_SubscribeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameNodeServiceServer).SubscribeEvents(m, &grpc.GenericServerStream[EventSubscriptionRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameNodeService_SubscribeEventsServer = grpc.ServerStreamingServer[Event]

// GameNodeService_ServiceDesc is the grpc.ServiceDesc for GameNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamenode.GameNodeService",
	HandlerType: (*GameNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GameNodeService_Register_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _GameNodeService_Heartbeat_Handler,
		},
		{
			MethodName: "ExecutePipeline",
			Handler:    _GameNodeService_ExecutePipeline_Handler,
		},
		{
			MethodName: "GetPipelineStatus",
			Handler:    _GameNodeService_GetPipelineStatus_Handler,
		},
		{
			MethodName: "CancelPipeline",
			Handler:    _GameNodeService_CancelPipeline_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _GameNodeService_StartContainer_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _GameNodeService_StopContainer_Handler,
		},
		{
			MethodName: "RestartContainer",
			Handler:    _GameNodeService_RestartContainer_Handler,
		},
		{
			MethodName: "GetNodeMetrics",
			Handler:    _GameNodeService_GetNodeMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNodeLogs",
			Handler:       _GameNodeService_StreamNodeLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamContainerLogs",
			Handler:       _GameNodeService_StreamContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeEvents",
			Handler:       _GameNodeService_SubscribeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/gamenode.proto",
}

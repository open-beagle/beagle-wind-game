// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: internal/proto/gamenode.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameNodeGRPCService_Register_FullMethodName        = "/gamenode.GameNodeGRPCService/Register"
	GameNodeGRPCService_Heartbeat_FullMethodName       = "/gamenode.GameNodeGRPCService/Heartbeat"
	GameNodeGRPCService_ReportMetrics_FullMethodName   = "/gamenode.GameNodeGRPCService/ReportMetrics"
	GameNodeGRPCService_ReportResource_FullMethodName  = "/gamenode.GameNodeGRPCService/ReportResource"
	GameNodeGRPCService_UpdateNodeState_FullMethodName = "/gamenode.GameNodeGRPCService/UpdateNodeState"
)

// GameNodeGRPCServiceClient is the client API for GameNodeGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GameNodeGRPCService 定义节点Agent的gRPC服务
type GameNodeGRPCServiceClient interface {
	// 节点管理
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	ReportMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	ReportResource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	UpdateNodeState(ctx context.Context, in *StateChangeRequest, opts ...grpc.CallOption) (*StateChangeResponse, error)
}

type gameNodeGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameNodeGRPCServiceClient(cc grpc.ClientConnInterface) GameNodeGRPCServiceClient {
	return &gameNodeGRPCServiceClient{cc}
}

func (c *gameNodeGRPCServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, GameNodeGRPCService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeGRPCServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, GameNodeGRPCService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeGRPCServiceClient) ReportMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, GameNodeGRPCService_ReportMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeGRPCServiceClient) ReportResource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, GameNodeGRPCService_ReportResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameNodeGRPCServiceClient) UpdateNodeState(ctx context.Context, in *StateChangeRequest, opts ...grpc.CallOption) (*StateChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateChangeResponse)
	err := c.cc.Invoke(ctx, GameNodeGRPCService_UpdateNodeState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameNodeGRPCServiceServer is the server API for GameNodeGRPCService service.
// All implementations must embed UnimplementedGameNodeGRPCServiceServer
// for forward compatibility.
//
// GameNodeGRPCService 定义节点Agent的gRPC服务
type GameNodeGRPCServiceServer interface {
	// 节点管理
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	ReportMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	ReportResource(context.Context, *ResourceRequest) (*ResourceResponse, error)
	UpdateNodeState(context.Context, *StateChangeRequest) (*StateChangeResponse, error)
	mustEmbedUnimplementedGameNodeGRPCServiceServer()
}

// UnimplementedGameNodeGRPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameNodeGRPCServiceServer struct{}

func (UnimplementedGameNodeGRPCServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGameNodeGRPCServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedGameNodeGRPCServiceServer) ReportMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMetrics not implemented")
}
func (UnimplementedGameNodeGRPCServiceServer) ReportResource(context.Context, *ResourceRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportResource not implemented")
}
func (UnimplementedGameNodeGRPCServiceServer) UpdateNodeState(context.Context, *StateChangeRequest) (*StateChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeState not implemented")
}
func (UnimplementedGameNodeGRPCServiceServer) mustEmbedUnimplementedGameNodeGRPCServiceServer() {}
func (UnimplementedGameNodeGRPCServiceServer) testEmbeddedByValue()                             {}

// UnsafeGameNodeGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameNodeGRPCServiceServer will
// result in compilation errors.
type UnsafeGameNodeGRPCServiceServer interface {
	mustEmbedUnimplementedGameNodeGRPCServiceServer()
}

func RegisterGameNodeGRPCServiceServer(s grpc.ServiceRegistrar, srv GameNodeGRPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameNodeGRPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameNodeGRPCService_ServiceDesc, srv)
}

func _GameNodeGRPCService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeGRPCServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeGRPCService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeGRPCServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeGRPCService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeGRPCServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeGRPCService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeGRPCServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeGRPCService_ReportMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeGRPCServiceServer).ReportMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeGRPCService_ReportMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeGRPCServiceServer).ReportMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeGRPCService_ReportResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeGRPCServiceServer).ReportResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeGRPCService_ReportResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeGRPCServiceServer).ReportResource(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameNodeGRPCService_UpdateNodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameNodeGRPCServiceServer).UpdateNodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameNodeGRPCService_UpdateNodeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameNodeGRPCServiceServer).UpdateNodeState(ctx, req.(*StateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameNodeGRPCService_ServiceDesc is the grpc.ServiceDesc for GameNodeGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameNodeGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamenode.GameNodeGRPCService",
	HandlerType: (*GameNodeGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GameNodeGRPCService_Register_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _GameNodeGRPCService_Heartbeat_Handler,
		},
		{
			MethodName: "ReportMetrics",
			Handler:    _GameNodeGRPCService_ReportMetrics_Handler,
		},
		{
			MethodName: "ReportResource",
			Handler:    _GameNodeGRPCService_ReportResource_Handler,
		},
		{
			MethodName: "UpdateNodeState",
			Handler:    _GameNodeGRPCService_UpdateNodeState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/gamenode.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: internal/proto/gamepipeline.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GamePipelineGRPCService_PipelineStream_FullMethodName       = "/pipeline.GamePipelineGRPCService/PipelineStream"
	GamePipelineGRPCService_UpdatePipelineStatus_FullMethodName = "/pipeline.GamePipelineGRPCService/UpdatePipelineStatus"
	GamePipelineGRPCService_UpdateStepStatus_FullMethodName     = "/pipeline.GamePipelineGRPCService/UpdateStepStatus"
)

// GamePipelineGRPCServiceClient is the client API for GamePipelineGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GamePipelineGRPCService 游戏节点流水线服务
type GamePipelineGRPCServiceClient interface {
	// Pipeline 流式服务
	// 1. Agent 通过此服务保持与 Server 的连接
	// 2. Server 通过此服务下发 Pipeline 任务
	// 3. Server 通过此服务发送取消命令
	PipelineStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PipelineStreamRequest, PipelineStreamResponse], error)
	// 更新流水线状态
	UpdatePipelineStatus(ctx context.Context, in *UpdatePipelineStatusRequest, opts ...grpc.CallOption) (*UpdatePipelineStatusResponse, error)
	// 更新步骤状态
	UpdateStepStatus(ctx context.Context, in *UpdateStepStatusRequest, opts ...grpc.CallOption) (*UpdateStepStatusResponse, error)
}

type gamePipelineGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGamePipelineGRPCServiceClient(cc grpc.ClientConnInterface) GamePipelineGRPCServiceClient {
	return &gamePipelineGRPCServiceClient{cc}
}

func (c *gamePipelineGRPCServiceClient) PipelineStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PipelineStreamRequest, PipelineStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GamePipelineGRPCService_ServiceDesc.Streams[0], GamePipelineGRPCService_PipelineStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PipelineStreamRequest, PipelineStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GamePipelineGRPCService_PipelineStreamClient = grpc.BidiStreamingClient[PipelineStreamRequest, PipelineStreamResponse]

func (c *gamePipelineGRPCServiceClient) UpdatePipelineStatus(ctx context.Context, in *UpdatePipelineStatusRequest, opts ...grpc.CallOption) (*UpdatePipelineStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePipelineStatusResponse)
	err := c.cc.Invoke(ctx, GamePipelineGRPCService_UpdatePipelineStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamePipelineGRPCServiceClient) UpdateStepStatus(ctx context.Context, in *UpdateStepStatusRequest, opts ...grpc.CallOption) (*UpdateStepStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStepStatusResponse)
	err := c.cc.Invoke(ctx, GamePipelineGRPCService_UpdateStepStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamePipelineGRPCServiceServer is the server API for GamePipelineGRPCService service.
// All implementations must embed UnimplementedGamePipelineGRPCServiceServer
// for forward compatibility.
//
// GamePipelineGRPCService 游戏节点流水线服务
type GamePipelineGRPCServiceServer interface {
	// Pipeline 流式服务
	// 1. Agent 通过此服务保持与 Server 的连接
	// 2. Server 通过此服务下发 Pipeline 任务
	// 3. Server 通过此服务发送取消命令
	PipelineStream(grpc.BidiStreamingServer[PipelineStreamRequest, PipelineStreamResponse]) error
	// 更新流水线状态
	UpdatePipelineStatus(context.Context, *UpdatePipelineStatusRequest) (*UpdatePipelineStatusResponse, error)
	// 更新步骤状态
	UpdateStepStatus(context.Context, *UpdateStepStatusRequest) (*UpdateStepStatusResponse, error)
	mustEmbedUnimplementedGamePipelineGRPCServiceServer()
}

// UnimplementedGamePipelineGRPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGamePipelineGRPCServiceServer struct{}

func (UnimplementedGamePipelineGRPCServiceServer) PipelineStream(grpc.BidiStreamingServer[PipelineStreamRequest, PipelineStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PipelineStream not implemented")
}
func (UnimplementedGamePipelineGRPCServiceServer) UpdatePipelineStatus(context.Context, *UpdatePipelineStatusRequest) (*UpdatePipelineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipelineStatus not implemented")
}
func (UnimplementedGamePipelineGRPCServiceServer) UpdateStepStatus(context.Context, *UpdateStepStatusRequest) (*UpdateStepStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStepStatus not implemented")
}
func (UnimplementedGamePipelineGRPCServiceServer) mustEmbedUnimplementedGamePipelineGRPCServiceServer() {
}
func (UnimplementedGamePipelineGRPCServiceServer) testEmbeddedByValue() {}

// UnsafeGamePipelineGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamePipelineGRPCServiceServer will
// result in compilation errors.
type UnsafeGamePipelineGRPCServiceServer interface {
	mustEmbedUnimplementedGamePipelineGRPCServiceServer()
}

func RegisterGamePipelineGRPCServiceServer(s grpc.ServiceRegistrar, srv GamePipelineGRPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedGamePipelineGRPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GamePipelineGRPCService_ServiceDesc, srv)
}

func _GamePipelineGRPCService_PipelineStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GamePipelineGRPCServiceServer).PipelineStream(&grpc.GenericServerStream[PipelineStreamRequest, PipelineStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GamePipelineGRPCService_PipelineStreamServer = grpc.BidiStreamingServer[PipelineStreamRequest, PipelineStreamResponse]

func _GamePipelineGRPCService_UpdatePipelineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamePipelineGRPCServiceServer).UpdatePipelineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GamePipelineGRPCService_UpdatePipelineStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamePipelineGRPCServiceServer).UpdatePipelineStatus(ctx, req.(*UpdatePipelineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GamePipelineGRPCService_UpdateStepStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStepStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamePipelineGRPCServiceServer).UpdateStepStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GamePipelineGRPCService_UpdateStepStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamePipelineGRPCServiceServer).UpdateStepStatus(ctx, req.(*UpdateStepStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GamePipelineGRPCService_ServiceDesc is the grpc.ServiceDesc for GamePipelineGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GamePipelineGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pipeline.GamePipelineGRPCService",
	HandlerType: (*GamePipelineGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePipelineStatus",
			Handler:    _GamePipelineGRPCService_UpdatePipelineStatus_Handler,
		},
		{
			MethodName: "UpdateStepStatus",
			Handler:    _GamePipelineGRPCService_UpdateStepStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PipelineStream",
			Handler:       _GamePipelineGRPCService_PipelineStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/gamepipeline.proto",
}

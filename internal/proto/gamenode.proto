syntax = "proto3";

package gamenode;

option go_package = "github.com/open-beagle/beagle-wind-game/internal/proto";

import "google/protobuf/timestamp.proto";

// GameNodeGRPCService 定义节点Agent的gRPC服务
service GameNodeGRPCService {
  // 节点管理
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc ReportMetrics(MetricsReport) returns (ReportResponse);
  rpc UpdateResourceInfo(ResourceInfo) returns (UpdateResponse);
  
  // Pipeline管理
  rpc ExecutePipeline(ExecutePipelineRequest) returns (ExecutePipelineResponse);
  rpc UpdatePipelineStatus(PipelineStatusUpdate) returns (UpdateResponse);
  rpc UpdateStepStatus(StepStatusUpdate) returns (UpdateResponse);
  rpc CancelPipeline(PipelineCancelRequest) returns (CancelResponse);
  
  // 日志流
  rpc StreamLogs(LogRequest) returns (stream LogEntry);
}

// 节点注册
message RegisterRequest {
  string id = 1;
  string alias = 2;
  string model = 3;
  string type = 4;
  string location = 5;
  map<string, string> hardware = 6;
  map<string, string> network = 7;
  map<string, string> labels = 8;
  ResourceInfo resource_info = 9;
}

message RegisterResponse {
  string session_id = 1;
  string status = 2;
  string message = 3;
}

// 心跳
message HeartbeatRequest {
  string id = 1;
  string session_id = 2;
  int64 timestamp = 3;
  ResourceInfo resource_info = 4;
}

message HeartbeatResponse {
  string status = 1;
  string message = 2;
}

// 节点指标报告
message MetricsReport {
  string id = 1;
  int64 timestamp = 2;
  repeated Metric metrics = 3;
}

message Metric {
  string name = 1;
  string type = 2;
  double value = 3;
  map<string, string> labels = 4;
}

// 资源信息更新
message ResourceInfo {
  string id = 1;
  int64 timestamp = 2;
  HardwareInfo hardware = 3;
  SoftwareInfo software = 4;
  NetworkInfo network = 5;
}

message HardwareInfo {
  CPUInfo cpu = 1;
  MemoryInfo memory = 2;
  GPUInfo gpu = 3;
  DiskInfo disk = 4;
}

message CPUInfo {
  string model = 1;
  int32 cores = 2;
  int32 threads = 3;
  double frequency = 4;
  double temperature = 5;
  double usage = 6;
  int64 cache = 7;
}

message MemoryInfo {
  int64 total = 1;
  int64 available = 2;
  int64 used = 3;
  double usage = 4;
  string type = 5;
  double frequency = 6;
  int32 channels = 7;
}

message GPUInfo {
  string model = 1;
  int64 memory_total = 2;
  int64 memory_used = 3;
  int64 memory_free = 4;
  double memory_usage = 5;
  double usage = 6;
  double temperature = 7;
  double power = 8;
  int32 cuda_cores = 9;
}

message DiskInfo {
  string model = 1;
  int64 capacity = 2;
  int64 used = 3;
  int64 free = 4;
  double usage = 5;
  string type = 6;
  string interface = 7;
  double read_speed = 8;
  double write_speed = 9;
  int64 iops = 10;
}

message SoftwareInfo {
  string os_distribution = 1;
  string os_version = 2;
  string os_architecture = 3;
  string kernel_version = 4;
  string gpu_driver_version = 5;
  string cuda_version = 6;
  string docker_version = 7;
  string containerd_version = 8;
  string runc_version = 9;
}

message NetworkInfo {
  double bandwidth = 1;
  double latency = 2;
  int32 connections = 3;
  double packet_loss = 4;
}

// Pipeline 执行请求
message ExecutePipelineRequest {
  string id = 1;
  string pipeline_id = 2;
  bytes pipeline_data = 3;
  map<string, string> envs = 4;
  map<string, string> args = 5;
}

message ExecutePipelineResponse {
  string status = 1;
  string message = 2;
}

// Pipeline 状态更新
message PipelineStatusUpdate {
  string id = 1;
  string pipeline_id = 2;
  string status = 3;
  int32 current_step = 4;
  float progress = 5;
  string error_message = 6;
  google.protobuf.Timestamp update_time = 7;
}

// Step 状态更新
message StepStatusUpdate {
  string pipeline_id = 1;
  string step_id = 2;
  StepStatus status = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  string error_message = 6;
  bytes logs = 7;
}

// Step 状态枚举
enum StepStatus {
  PENDING = 0;
  RUNNING = 1;
  COMPLETED = 2;
  FAILED = 3;
  CANCELLED = 4;
}

// Pipeline 取消请求
message PipelineCancelRequest {
  string pipeline_id = 1;
  string reason = 2;
}

message CancelResponse {
  string status = 1;
  string message = 2;
}

// 日志请求
message LogRequest {
  string pipeline_id = 1;
  string step_id = 2;
  string level = 3;
  int64 start_time = 4;
  int64 end_time = 5;
}

// 日志条目
message LogEntry {
  string pipeline_id = 1;
  string step_id = 2;
  string level = 3;
  string message = 4;
  google.protobuf.Timestamp timestamp = 5;
}

// 通用响应
message UpdateResponse {
  string status = 1;
  string message = 2;
}

message ReportResponse {
  string status = 1;
  string message = 2;
}

// 事件
message Event {
  string type = 1;
  string id = 2;
  string entity_id = 3;
  string status = 4;
  string message = 5;
  google.protobuf.Timestamp timestamp = 6;
  map<string, string> data = 7;
} 
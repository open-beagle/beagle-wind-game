syntax = "proto3";

package gamenode;

option go_package = "github.com/open-beagle/beagle-wind-game/internal/proto";

import "google/protobuf/timestamp.proto";

// GameNodeGRPCService 定义节点Agent的gRPC服务
service GameNodeGRPCService {
  // 节点管理
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc ReportMetrics(MetricsRequest) returns (MetricsResponse);
  rpc ReportResource(ResourceRequest) returns (ResourceResponse);
  rpc UpdateNodeState(StateChangeRequest) returns (StateChangeResponse);
}

// 节点注册
message RegisterRequest {
  string id = 1;
  string alias = 2;
  string model = 3;
  string type = 4;           // 此处仍使用string，而不是枚举，避免兼容性问题
  string location = 5;
  map<string, string> hardware = 6;
  map<string, string> system = 7;
  map<string, string> labels = 8;
}

message RegisterResponse {
  bool success = 1;
  string message = 2;
  GameNodeStaticState state = 3;  // 节点维护状态
}

// 心跳
message HeartbeatRequest {
  string id = 1;
  string session_id = 2;
  int64 timestamp = 3;
}

message HeartbeatResponse {
  string status = 1;
  string message = 2;
}

// 节点指标报告
message MetricsRequest {
  string id = 1;
  int64 timestamp = 2;
  MetricsInfo metrics = 3;
}

message MetricsInfo {
  repeated CPUMetrics cpus = 1;
  MemoryMetrics memory = 2;
  repeated GPUMetrics gpus = 3;
  repeated StorageMetrics storages = 4;
  NetworkMetrics network = 5;
}

message CPUMetrics {
  string model = 1;
  int32 cores = 2;
  int32 threads = 3;
  double usage = 4;
}

message MemoryMetrics {
  int64 total = 1;
  int64 available = 2;
  int64 used = 3;
  double usage = 4;
}

message GPUMetrics {
  string model = 1;
  int64 memory_total = 2;
  double gpu_usage = 3;
  int64 memory_used = 4;
  int64 memory_free = 5;
  double memory_usage = 6;
}

message StorageMetrics {
  string path = 1;
  string type = 2;
  string model = 3;
  int64 capacity = 4;
  int64 used = 5;
  int64 free = 6;
  double usage = 7;
}

message NetworkMetrics {
  double inbound_traffic = 1;
  double outbound_traffic = 2;
  int32 connections = 3;
}

message MetricsResponse {
  bool success = 1;
  string message = 2;
}

// 资源信息更新
message ResourceRequest {
  string node_id = 1;
  int64 timestamp = 2;
  HardwareInfo hardware = 3;
  SystemInfo system = 4;
}

message ResourceResponse {
  bool success = 1;
  string message = 2;
}

// 状态变更请求
message StateChangeRequest {
  string node_id = 1;
  GameNodeStaticState target_state = 2;
  google.protobuf.Timestamp change_time = 3;
}

message StateChangeResponse {
  bool success = 1;
  string error_message = 2;
  google.protobuf.Timestamp confirm_time = 3;
}

// 节点维护状态
enum GameNodeStaticState {
  NODE_STATE_NORMAL = 0;      // 正常状态
  NODE_STATE_MAINTENANCE = 1; // 维护状态
  NODE_STATE_DISABLED = 2;    // 禁用状态
}

// 硬件信息
message HardwareInfo {
  repeated CPUHardware cpus = 1;
  repeated MemoryHardware memories = 2;
  repeated GPUHardware gpus = 3;
  repeated StorageDevice storages = 4;
  repeated NetworkDevice networks = 5;
}

message CPUHardware {
  string model = 1;
  int32 cores = 2;
  int32 threads = 3;
  double frequency = 4;
  int64 cache = 5;
  string architecture = 6;
}

message MemoryHardware {
  int64 size = 1;
  string type = 2;
  double frequency = 3;
}

message GPUHardware {
  string model = 1;
  int64 memory_total = 2;
  string architecture = 3;
  string driver_version = 4;
  string compute_capability = 5;
  int32 tdp = 6;
}

message StorageDevice {
  string type = 1;
  string model = 2;
  int64 capacity = 3;
  string path = 4;
}

message NetworkDevice {
  string name = 1;
  string mac_address = 2;
  string ip_address = 3;
  int64 speed = 4;
}

// 系统信息
message SystemInfo {
  string os_distribution = 1;
  string os_version = 2;
  string os_architecture = 3;
  string kernel_version = 4;
  string gpu_driver_version = 5;
  string gpu_compute_api_version = 6;
  string docker_version = 7;
  string containerd_version = 8;
  string runc_version = 9;
} 